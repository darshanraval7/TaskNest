{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\NodeJS\\\\TaskNest\\\\TaskNest\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState, useEffect } from \"react\";\nimport TodoForm from './components/TodoForm/TodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport ContactCard from './components/ContactCard/ContactCard';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState(() => {\n    // Load tasks from localStorage on first render\n    const savedTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    return savedTasks || [];\n  });\n  const [userName, setUserName] = useState(() => {\n    // Load user name from sessionStorage on first render\n    return localStorage.getItem(\"userName\") || \"My To-Do List\";\n  });\n  const [isEditingName, setIsEditingName] = useState(false);\n\n  // State for theme handling\n  const [theme, setTheme] = useState(() => {\n    return localStorage.getItem(\"theme\") || \"light\"; // Default to light theme\n  });\n\n  // Save tasks to localStorage whenever tasks array changes\n  useEffect(() => {\n    if (tasks.length > 0) {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n  }, [tasks]);\n\n  // Save user name to sessionStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"userName\", userName);\n  }, [userName]);\n\n  // Apply theme to body class\n  useEffect(() => {\n    document.body.className = theme; // Set body class to theme (light or dark)\n    localStorage.setItem(\"theme\", theme); // Save user theme preference in localStorage\n  }, [theme]);\n  const addTask = (taskText, taskCategory, priority, dueDate) => {\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      date: new Date().toISOString(),\n      category: taskCategory,\n      priority,\n      dueDate,\n      completed: false\n    };\n    setTasks([newTask, ...tasks]);\n  };\n  const handleCheckboxChange = taskId => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === taskId) {\n        task.completed = !task.completed;\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n  const handleDelete = taskId => {\n    const updatedTasks = tasks.filter(task => task.id !== taskId);\n    setTasks(updatedTasks);\n  };\n\n  // Theme toggle handler\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  // Check for tasks with approaching due dates\n  useEffect(() => {\n    const checkReminders = () => {\n      const now = new Date();\n      tasks.forEach(task => {\n        if (task.dueDate && !task.completed) {\n          const dueDate = new Date(task.dueDate);\n          const timeDifference = dueDate - now;\n          const hoursLeft = Math.floor(timeDifference / (1000 * 60 * 60));\n          if (hoursLeft < 24 && hoursLeft > 0) {\n            alert(`Reminder: Task \"${task.text}\" is due in ${hoursLeft} hours.`);\n          }\n        }\n      });\n    };\n    const intervalId = setInterval(checkReminders, 60 * 60 * 1000); // Check every hour\n    return () => clearInterval(intervalId);\n  }, [tasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between align-items-center mb-4\",\n      children: [isEditingName ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          setIsEditingName(false);\n        },\n        className: \"d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: userName,\n          onChange: e => setUserName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ms-2\",\n          type: \"submit\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: userName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary\",\n          onClick: () => setIsEditingName(true),\n          children: \"Edit Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-outline-dark\",\n        onClick: toggleTheme,\n        children: [\"Switch to \", theme === \"light\" ? \"Dark\" : \"Light\", \" Mode\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoForm, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      tasks: tasks,\n      onCheckboxChange: handleCheckboxChange,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactCard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+ZO8Fj9x3NOIgSO0GCpfPpfchkA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TodoForm","TodoList","ContactCard","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","tasks","setTasks","savedTasks","JSON","parse","localStorage","getItem","userName","setUserName","isEditingName","setIsEditingName","theme","setTheme","length","setItem","stringify","document","body","className","addTask","taskText","taskCategory","priority","dueDate","newTask","id","Date","now","text","date","toISOString","category","completed","handleCheckboxChange","taskId","updatedTasks","map","task","handleDelete","filter","toggleTheme","prevTheme","checkReminders","forEach","timeDifference","hoursLeft","Math","floor","alert","intervalId","setInterval","clearInterval","children","onSubmit","e","preventDefault","type","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onCheckboxChange","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/NodeJS/TaskNest/TaskNest/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState, useEffect } from \"react\";\nimport TodoForm from './components/TodoForm/TodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport ContactCard from './components/ContactCard/ContactCard';\n\nfunction App() {\n  const [tasks, setTasks] = useState(() => {\n    // Load tasks from localStorage on first render\n    const savedTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n    return savedTasks || [];\n  });\n  \n  const [userName, setUserName] = useState(() => {\n    // Load user name from sessionStorage on first render\n    return localStorage.getItem(\"userName\") || \"My To-Do List\";\n  });\n  \n  const [isEditingName, setIsEditingName] = useState(false);\n\n  // State for theme handling\n  const [theme, setTheme] = useState(() => {\n    return localStorage.getItem(\"theme\") || \"light\"; // Default to light theme\n  });\n\n  // Save tasks to localStorage whenever tasks array changes\n  useEffect(() => {\n    if (tasks.length > 0) {\n      localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n  }, [tasks]);\n\n  // Save user name to sessionStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"userName\", userName);\n  }, [userName]);\n\n  // Apply theme to body class\n  useEffect(() => {\n    document.body.className = theme; // Set body class to theme (light or dark)\n    localStorage.setItem(\"theme\", theme); // Save user theme preference in localStorage\n  }, [theme]);\n\n  const addTask = (taskText, taskCategory, priority, dueDate) => {\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      date: new Date().toISOString(),\n      category: taskCategory,\n      priority,\n      dueDate,\n      completed: false,\n    };\n    setTasks([newTask, ...tasks]);\n  };\n\n  const handleCheckboxChange = (taskId) => {\n    const updatedTasks = tasks.map((task) => {\n      if (task.id === taskId) {\n        task.completed = !task.completed;\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  };\n\n  const handleDelete = (taskId) => {\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\n    setTasks(updatedTasks);\n  };\n\n  // Theme toggle handler\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  // Check for tasks with approaching due dates\n  useEffect(() => {\n    const checkReminders = () => {\n      const now = new Date();\n      tasks.forEach((task) => {\n        if (task.dueDate && !task.completed) {\n          const dueDate = new Date(task.dueDate);\n          const timeDifference = dueDate - now;\n          const hoursLeft = Math.floor(timeDifference / (1000 * 60 * 60));\n          if (hoursLeft < 24 && hoursLeft > 0) {\n            alert(`Reminder: Task \"${task.text}\" is due in ${hoursLeft} hours.`);\n          }\n        }\n      });\n    };\n    const intervalId = setInterval(checkReminders, 60 * 60 * 1000); // Check every hour\n    return () => clearInterval(intervalId);\n  }, [tasks]);\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\n        {isEditingName ? (\n          <form onSubmit={(e) => { e.preventDefault(); setIsEditingName(false); }} className=\"d-flex\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={userName}\n              onChange={(e) => setUserName(e.target.value)}\n            />\n            <button className=\"btn btn-primary ms-2\" type=\"submit\">Save</button>\n          </form>\n        ) : (\n          <>\n            <h4>{userName}</h4>\n            <button className=\"btn btn-secondary\" onClick={() => setIsEditingName(true)}>Edit Name</button>\n          </>\n        )}\n        {/* Dark/Light Theme Toggle Button */}\n        <button className=\"btn btn-outline-dark\" onClick={toggleTheme}>\n\n          Switch to {theme === \"light\" ? \"Dark\" : \"Light\"} Mode\n\n        </button>\n      </div>\n      <TodoForm addTask={addTask} />\n      <TodoList tasks={tasks} onCheckboxChange={handleCheckboxChange} onDelete={handleDelete} />\n      <ContactCard />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}